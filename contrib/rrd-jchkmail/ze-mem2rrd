#!/opt/perl/bin/perl -w

use strict;

use lib qw( /opt/rrdtool/lib/perl ../lib/perl );

use RRDs;

my $RRD_DIR = "rrd";

my $last_update = min_last_rrd();


my @FIELDS = qw(CONN ABRT MSGS KBYTES RCPT
                FILES XFILES THROTTLE OPENCONN
                BADRCPT LOCALUSER RESFAIL RESFORG
                MATCHING ORACLE URLBL SPAMTRAP GREYMSGS GREYRCPT);

my $NB_VALUES = $#FIELDS;


my ($stamp, $conn, $abrt, $msgs, $kbytes, $rcpt, $files,
    $xfiles, $throttle, $badrcpt, $localuser, $resfail,
    $openconn, $resforg, $matching, $oracle, $urlbl, 
    $spamtrap, $greymsgs, $greyrcpt);

my ($cmd);

my %M1 = ();
my %M2 = ();
my %DIFF = ();

my ($hold, $hnew) = (\%M1, \%M2);

printf "last update = %d \n", $last_update;

my $nb = 0;
my $nlog = 0;
my $nl = 0;

foreach (<>) {
  chomp;

  printf "-> %7d lines\n", $nl if ($nl++ % 1000) == 0;

  next unless /CONN=\(/;

  my @new = split;
  next if $#new < 0;

  $stamp = shift(@new);

  #print "STAMP $stamp\n";

  my $PAR;
  foreach $PAR (@new) {
    my ($p, $v) = get_param_value($PAR);

    next if !defined($p) || !defined($v);

    $hnew->{$p} = $v if (defined($p) && defined($v));
  }

   my $v;

  foreach $v (@FIELDS) {
    $DIFF{$v} = 0;
    if (exists($hnew->{$v})) {
      $DIFF{$v} = $hnew->{$v} -  $hold->{$v} if exists($hold->{$v});
    }
  }

  {
    my $t = $hnew;
    $hnew = $hold;
    $hold = $t;
  }

  next if $stamp <= $last_update;
  $last_update = $stamp;

  if (0) {
    foreach $v (sort keys %DIFF) {
      if (($v eq "KBYTES") && ($DIFF{$v} > 0)) {
        printf "-> %-20s %5d\n", $v, $DIFF{$v};
        $nlog++;
      }
      #printf "-> %-20s %5d\n", $v, $DIFF{$v};
      #$nlog++ if $v eq "KBYTES";
      last if $nlog == 20;
    }
  }

  if ($DIFF{"KBYTES"} > 0) {
    # printf "-> %d : KBYTES = %d\n", $stamp, $DIFF{"KBYTES"}
  }

  $nb++;

  #last if ($nb > 0);

  $cmd = sprintf ("%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d",
                  $stamp,
                  $DIFF{"CONN"},
                  $DIFF{"ABRT"},
                  $DIFF{"MSGS"},
                  $DIFF{"KBYTES"},
                  $DIFF{"RCPT"},
                  $DIFF{"FILES"},
                  $DIFF{"XFILES"},
                  $DIFF{"THROTTLE"},
                  $DIFF{"OPENCONN"},
                  $DIFF{"BADRCPT"},
                  $DIFF{"LOCALUSER"},
                  $DIFF{"RESFAIL"},
                  $DIFF{"RESFORG"},
                  $DIFF{"MATCHING"},
                  $DIFF{"ORACLE"},
                  $DIFF{"URLBL"},
                  $DIFF{"SPAMTRAP"},
		  $DIFF{"GREYMSGS"},
		  $DIFF{"GREYRCPT"}
		 );

  RRDs::update("$RRD_DIR/j-chkmail.rrd",
               "--template=" .
               "CONN:ABRT:MSGS:KBYTES:RCPT:" .
               "FILES:XFILES:THROTTLE:OPENCONN:BADRCPT:LOCALUSER:" .
               "RESFAIL:RESFORG:MATCHING:ORACLE:URLBL:SPAMTRAP:GREYMSGS:GREYRCPT", $cmd);

  my $ERR = RRDs::error;
  # die "ERREUR pendant m.a.j. de $RRD_DIR/j-chkmail.rrd : $ERR\n" if $ERR;
}

printf "%d records\n", $nb;

exit 0;

#   LAST  PID   Size Resident   Shared  Private  Process
#




#################################
#
#
sub min_last_rrd {
  my $result = time();

  if ( -f "$RRD_DIR/j-chkmail.rrd") {
    $result = RRDs::last ("$RRD_DIR/j-chkmail.rrd");
  }

  printf "RESULT : %d\n", $result;

  my $ERR = RRDs::error;
  if ($ERR) {
    print "ERREUR pendant execution RRDs::last : $ERR\n";
  }
  $result = 0 if ! defined($result);
  return $result;
}

######################################################################
#
#
#
sub get_param_value
{
  my ($tag, undef) = @_;

  return (undef,undef) unless $tag =~ /([^=]*)=\(([^)]*)\)/;

  return ($1, $2);
}


