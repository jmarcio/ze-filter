#! /usr/bin/perl -w
#
#  Description :
#
#  Author      : Jose-Marcio Martins da Cruz
#                mailto:jose-marcio.martins@mines-paristech.fr
#                Ecole des Mines de Paris
#
#  History     :
#
#  TODO        :
#
use strict;
use Getopt::Long;
use Pod::Usage;
use POSIX;
use File::Path;
use File::Find;

use FindBin qw($Bin);
use lib "$Bin/../lib";

# ------------------------------------------------
#
#
my $appl = `basename $0`;
chomp $appl;

my %StaticData = ();
GetStaticData(\%StaticData);

my $h = \%{$StaticData{dirs}};
my %Dirs = map {$_ => $h->{$_}} grep {$_ !~ /_data_/} keys %{$h};


my @Files2Update = StaticDataArray("tasks", "FILES2UPDATE");
foreach (@Files2Update) {
  s/\+\s*//;
}

my %ReplacePattern = ();
{
  my @Tmp = StaticDataArray("tasks", "REPLACE");
  foreach (@Tmp) {
    s/\+\s*//;
    if (/(\d+)\s+(\S+)\s+(\S.*)/) {
      $ReplacePattern{$1}{in}  = $2;
      $ReplacePattern{$1}{out} = $3;
    }
  }
}

# === begin options conf ===

# Defining CL options and default values
my $help    = 0;
my $debug   = 0;
my $verbose = 0;
my $op      = "";

my %Conf = (
  "prefix" => "/tmp/ze",
  "remove" => 0,
  "user"   => "ze-filter",
  "group"  => "ze-filter",
);

my %ConfCli = ();
foreach my $k (keys %Conf) {
  $ConfCli{$k} = undef;
}

# Reading CL options
my $ok = GetOptions(
  "h!"       => \$help,
  "help!"    => \$help,
  "d!"       => \$debug,
  "debug!"   => \$debug,
  "v!"       => \$verbose,
  "op=s"     => \$op,
  "prefix=s" => \$ConfCli{prefix},
  "remove!"  => \$ConfCli{remove},
  "user=s"   => \$ConfCli{user},
  "group=s"  => \$ConfCli{group},
);

ReadConfigurationFile();

foreach my $k (keys %Conf) {
  if (defined $ConfCli{$k}) {
    $Conf{$k} = $ConfCli{$k};
  }
}

# === end options conf ===

if ($help || $op =~ /help/i) {
  usage();
  exit 0;
}

$op = lc $op;

my $prefix = $Conf{prefix};

if ($op =~ /^(copy|move|rename)$/) {
  printf "* Directories to $op\n";
  foreach my $k (keys %Dirs) {
    printf "  * Dir : %-24s => %s\n", $k, $prefix . $Dirs{$k};
  }
  printf "\n";
}

if ($op =~ /^(copy)$/) {
  foreach my $k (keys %Dirs) {
    unless (-d $k) {
      printf "ERROR : directory %s doesn't exists\n", $k;
      next;
    }
    my $dst = $prefix . $Dirs{$k};
    rmtree $dst;
    printf "* will create $dst\n";
    File::Path::make_path "$dst";

    my $cmd = "rsync -aq $k/ $dst/";
    system("$cmd");
  }
}

if ($op =~ /^(move|rename)$/) {
  foreach my $k (keys %Dirs) {
    unless (-d $k) {
      printf "ERROR : directory %s doesn't exists\n", $k;
      next;
    }
    my $dst = $prefix . $Dirs{$k};
    if (-d $dst) {
      printf "ERROR : directory %s already exists\n", $dst;
      next;
    }
    rmtree $dst;

    printf "* will rename $k to $dst\n";
    my $cmd = "mv $k $dst";
    system("$cmd");
  }
}

if ($op =~ /^(copy|move|rename)$/) {
  foreach my $k (keys %Dirs) {
    my $dst = $prefix . $Dirs{$k};
    my $cmd = "find $dst -type d";
    my $n   = 0;
    do {
      $n = 0;
      open DIRS, "$cmd |" || die $@;
      my @Dirs = <DIRS>;
      close DIRS;
      chomp @Dirs;
      foreach my $jd (@Dirs) {
        my $zd = $jd;
        $zd =~ s/jchkmail/ze-filter/;
        $zd =~ s/jgreyd/ze-greyd/;
        $zd =~ s/j-/ze-/;
        next unless $jd ne $zd;
        rename $jd, $zd;
        $n++;
      }
    } while $n > 0;

    $cmd = "find $dst -type f";
    open FILES, "$cmd |" || die $@;
    my @Files = <FILES>;
    close FILES;
    chomp @Files;
    foreach my $jd (@Files) {
      my $zd = $jd;
      $zd =~ s/j-chkmail/ze-filter/;
      $zd =~ s/jchkmail/ze-filter/;
      $zd =~ s/j-/ze-/;
      next unless $jd ne $zd;
      rename $jd, $zd;
    }
  }
  foreach my $k (keys %Dirs) {
    my $dst = $prefix . $Dirs{$k};
    my $cmd = "chown -hR $Conf{user}:$Conf{group} $dst";
    system($cmd);
  }
  foreach my $fg (@Files2Update) {
    my @Files = glob($prefix . $fg);
    foreach my $fin (@Files) {
      printf " Updating file : %s\n", $fin if $verbose;
      open FUPD, "< $fin" || next;
      my @Tmp = <FUPD>;
      close FUPD;
      rename "$fin", "$fin.org";
      foreach my $line (@Tmp) {
        foreach my $k (sort {$a <=> $b} keys %ReplacePattern) {
          my $in  = $ReplacePattern{$k}{in};
          my $out = $ReplacePattern{$k}{out};
          $line =~ s/$in/$out/g;
        }
        $line =~ s/ze-filter dot ensmp dot fr/foss dot jose-marcio dot org/;
      }
      open FUPD, "> $fin" || next;
      print FUPD @Tmp;
      close FUPD;
    }
  }
  exit 0;
}

exit 0;

# ------------------------------------------------
#/tmp/ze/etc/ze-filter/ze-filter.cf
#
sub ReadConfigurationFile {
  my @ccEtc = ("$Bin/../etc", "/etc");
  my $ConfFile = "$appl.conf";

  #  my ($r, undef) = cc_conf_init($ConfFile, @ccEtc);
  #  if ($r) {
  #    $r = cc_conf_read();
  #  }

  # add your code here to handle configuration files
}

# ------------------------------------------------
#
#
sub usage {
  my @X = qw();
  @X = StaticDataArray("help", "USAGE");
  if ($#X >= 0) {
    print "\n";
    foreach (@X) {
      s/^\+//;
      s/__APPL__/$appl/;
      print $_, "\n";
    }
  } else {
    print "\n Usage : $appl [OPTIONS]\n";
  }

  @X = StaticDataArray("help", "HEAD");
  foreach (@X) {
    s/^\+//;
    print $_, "\n";
  }

  @X = StaticDataArray("help", "BODY");
  foreach (@X) {
    s/^\+//;
    print $_, "\n";
  }

  @X = StaticDataArray("help", "FOOT");
  foreach (@X) {
    s/^\+//;
    print $_, "\n";
  }
}

# ------------------------------------------------
#
#
sub GetStaticData {
  my ($h, undef) = @_;
  my @DATA = <DATA>;
  my @SOPT = qw();
  chomp @DATA;
  my $in  = 0;
  my $key = "";
  foreach my $s (@DATA) {
    if ($key eq "") {
      if ($s =~ /==\s+BEGIN\s+(\S+)\s+==/) {
        $key = lc($1);
      }
      next;
    }
    if ($s =~ /==\s+END\s+(\S*\s+)?==/) {
      $key = "";
      next;
    }
    next if $s =~ /^\s*$/;
    push @{$h->{$key}{_data_}}, $s;
    my ($a, $b) = split " ", $s, 2;
    next unless defined $a && $a ne "";
    $b = "" unless defined $b;
    if ($b =~ /[+]{2}(.*)/) {
      if (exists $h->{$key}{$a}) {
        $h->{$key}{$a} .= " $1";
      } else {
        $h->{$key}{$a} = $1;
      }
    } else {
      $h->{$key}{$a} = $b;
    }
  }
}

# ------------------------------------------------
#
#
sub StaticDataArray {
  my ($key, $tag, undef) = @_;

  my @LINES = grep {$_ =~ /^$tag\s+/i} @{$StaticData{$key}{_data_}};
  foreach (@LINES) {
    s/^$tag\s+//;
  }
  return @LINES;
}

# ------------------------------------------------
#
#

__DATA__

== BEGIN HELP ==

# === begin usage conf ===
BODY +
BODY +  -h            This message
BODY +                default : false
BODY +  --help        This message
BODY +                default : false
BODY +  -d            Debug mode
BODY +                default : false
BODY +  --debug       Debug mode
BODY +                default : false
BODY +  -v            Verbose
BODY +                default : false
BODY +  --op          What to do ???
BODY +                default : 
BODY +  --prefix      Prefix
BODY +                default : /tmp
BODY +  --remove      Remove old content
BODY +                default : false
BODY +  --user        User
BODY +                default : ze-filter
BODY +  --group       Group
BODY +                default : ze-filter
BODY +
# === end usage conf ===

== END ==

== BEGIN DIRS ==
/etc/mail/jchkmail    /etc/ze-filter
/var/jchkmail         /var/ze-filter
/var/spool/jchkmail   /var/spool/ze-filter
== END ==

== BEGIN TASKS ==
FILES2UPDATE +        /etc/ze-filter/*
FILES2UPDATE +        /var/ze-filter/cdb/get-*
FILES2UPDATE +        /var/ze-filter/cdb/Makefile*

REPLACE +             1 dnsbl.j-chkmail.org  dnsbl.jose-marcio.org
REPLACE +             1 rsync.j-chkmail.org  rsync.jose-marcio.org
REPLACE +             1 j-chkmail.ensmp.fr   rsync.jose-marcio.org
REPLACE +             2 j-chkmail            ze-filter
REPLACE +             3 jchkmail             ze-filter
REPLACE +             4 jgreydb              ze-greydb
REPLACE +             5 jgreyd               ze-greyd
REPLACE +             6 j-                   ze-
== END ==

__END__

